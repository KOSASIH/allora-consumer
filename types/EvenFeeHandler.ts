/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type EvenFeeHandlerConstructorArgsStruct = { admin: AddressLike };

export type EvenFeeHandlerConstructorArgsStructOutput = [admin: string] & {
  admin: string;
};

export interface EvenFeeHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "claimFees"
      | "feedOwnerPortion"
      | "feesAccrued"
      | "handleFees"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateFeedOwnerPortion"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortion"
      | "AlloraAdapterV2EvenFeeHandlerFeesClaimed"
      | "AlloraAdapterV2EvenFeeHandlerFeesHandled"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feedOwnerPortion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesAccrued",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFees",
    values: [AddressLike, AddressLike[], BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeedOwnerPortion",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feedOwnerPortion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handleFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeedOwnerPortion",
    data: BytesLike
  ): Result;
}

export namespace AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent {
  export type InputTuple = [feedOwnerPortion: BigNumberish];
  export type OutputTuple = [feedOwnerPortion: bigint];
  export interface OutputObject {
    feedOwnerPortion: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent {
  export type InputTuple = [claimer: AddressLike, fees: BigNumberish];
  export type OutputTuple = [claimer: string, fees: bigint];
  export interface OutputObject {
    claimer: string;
    fees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AlloraAdapterV2EvenFeeHandlerFeesHandledEvent {
  export type InputTuple = [fee: BigNumberish, feeReceivers: AddressLike[]];
  export type OutputTuple = [fee: bigint, feeReceivers: string[]];
  export interface OutputObject {
    fee: bigint;
    feeReceivers: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EvenFeeHandler extends BaseContract {
  connect(runner?: ContractRunner | null): EvenFeeHandler;
  waitForDeployment(): Promise<this>;

  interface: EvenFeeHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  claimFees: TypedContractMethod<[], [void], "nonpayable">;

  feedOwnerPortion: TypedContractMethod<[], [bigint], "view">;

  feesAccrued: TypedContractMethod<
    [feeReciever: AddressLike],
    [bigint],
    "view"
  >;

  handleFees: TypedContractMethod<
    [feedOwner: AddressLike, feeReceivers: AddressLike[], arg2: BytesLike],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFeedOwnerPortion: TypedContractMethod<
    [feedOwnerPortion_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feedOwnerPortion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feesAccrued"
  ): TypedContractMethod<[feeReciever: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleFees"
  ): TypedContractMethod<
    [feedOwner: AddressLike, feeReceivers: AddressLike[], arg2: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeedOwnerPortion"
  ): TypedContractMethod<
    [feedOwnerPortion_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortion"
  ): TypedContractEvent<
    AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent.InputTuple,
    AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent.OutputTuple,
    AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent.OutputObject
  >;
  getEvent(
    key: "AlloraAdapterV2EvenFeeHandlerFeesClaimed"
  ): TypedContractEvent<
    AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent.InputTuple,
    AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent.OutputTuple,
    AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent.OutputObject
  >;
  getEvent(
    key: "AlloraAdapterV2EvenFeeHandlerFeesHandled"
  ): TypedContractEvent<
    AlloraAdapterV2EvenFeeHandlerFeesHandledEvent.InputTuple,
    AlloraAdapterV2EvenFeeHandlerFeesHandledEvent.OutputTuple,
    AlloraAdapterV2EvenFeeHandlerFeesHandledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortion(uint256)": TypedContractEvent<
      AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent.InputTuple,
      AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent.OutputTuple,
      AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent.OutputObject
    >;
    AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortion: TypedContractEvent<
      AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent.InputTuple,
      AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent.OutputTuple,
      AlloraAdapterV2EvenFeeHandlerAdminUpdatedFeedOwnerFeePortionEvent.OutputObject
    >;

    "AlloraAdapterV2EvenFeeHandlerFeesClaimed(address,uint256)": TypedContractEvent<
      AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent.InputTuple,
      AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent.OutputTuple,
      AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent.OutputObject
    >;
    AlloraAdapterV2EvenFeeHandlerFeesClaimed: TypedContractEvent<
      AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent.InputTuple,
      AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent.OutputTuple,
      AlloraAdapterV2EvenFeeHandlerFeesClaimedEvent.OutputObject
    >;

    "AlloraAdapterV2EvenFeeHandlerFeesHandled(uint256,address[])": TypedContractEvent<
      AlloraAdapterV2EvenFeeHandlerFeesHandledEvent.InputTuple,
      AlloraAdapterV2EvenFeeHandlerFeesHandledEvent.OutputTuple,
      AlloraAdapterV2EvenFeeHandlerFeesHandledEvent.OutputObject
    >;
    AlloraAdapterV2EvenFeeHandlerFeesHandled: TypedContractEvent<
      AlloraAdapterV2EvenFeeHandlerFeesHandledEvent.InputTuple,
      AlloraAdapterV2EvenFeeHandlerFeesHandledEvent.OutputTuple,
      AlloraAdapterV2EvenFeeHandlerFeesHandledEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
