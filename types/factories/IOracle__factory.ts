/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { IOracle, IOracleInterface } from "../IOracle";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
              },
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "topicId",
                    type: "uint64",
                  },
                  {
                    internalType: "uint64",
                    name: "timestamp",
                    type: "uint64",
                  },
                  {
                    internalType: "uint256",
                    name: "numericValue",
                    type: "uint256",
                  },
                  {
                    internalType: "bytes",
                    name: "extraData",
                    type: "bytes",
                  },
                ],
                internalType: "struct NumericData",
                name: "numericData",
                type: "tuple",
              },
            ],
            internalType: "struct SignedNumericData[]",
            name: "signedNumericData",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "extraData",
            type: "bytes",
          },
        ],
        internalType: "struct UpshotOracleNumericData",
        name: "pd",
        type: "tuple",
      },
    ],
    name: "verifyData",
    outputs: [
      {
        internalType: "uint256",
        name: "numericValue",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IOracle__factory {
  static readonly abi = _abi;
  static createInterface(): IOracleInterface {
    return new Interface(_abi) as IOracleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IOracle {
    return new Contract(address, _abi, runner) as unknown as IOracle;
  }
}
