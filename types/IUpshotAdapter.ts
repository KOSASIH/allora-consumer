/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type TopicConfigStruct = {
  title: string;
  owner: AddressLike;
  recentValueTime: BigNumberish;
  recentValue: BigNumberish;
  totalFee: BigNumberish;
  aggregator: AddressLike;
  ownerSwitchedOn: boolean;
  adminSwitchedOn: boolean;
  feeHandler: AddressLike;
  dataProviderQuorum: BigNumberish;
  dataValiditySeconds: BigNumberish;
};

export type TopicConfigStructOutput = [
  title: string,
  owner: string,
  recentValueTime: bigint,
  recentValue: bigint,
  totalFee: bigint,
  aggregator: string,
  ownerSwitchedOn: boolean,
  adminSwitchedOn: boolean,
  feeHandler: string,
  dataProviderQuorum: bigint,
  dataValiditySeconds: bigint
] & {
  title: string;
  owner: string;
  recentValueTime: bigint;
  recentValue: bigint;
  totalFee: bigint;
  aggregator: string;
  ownerSwitchedOn: boolean;
  adminSwitchedOn: boolean;
  feeHandler: string;
  dataProviderQuorum: bigint;
  dataValiditySeconds: bigint;
};

export type TopicViewStruct = {
  config: TopicConfigStruct;
  validDataProviders: AddressLike[];
};

export type TopicViewStructOutput = [
  config: TopicConfigStructOutput,
  validDataProviders: string[]
] & { config: TopicConfigStructOutput; validDataProviders: string[] };

export type NumericDataStruct = {
  topicId: BigNumberish;
  timestamp: BigNumberish;
  numericValue: BigNumberish;
  extraData: BytesLike;
};

export type NumericDataStructOutput = [
  topicId: bigint,
  timestamp: bigint,
  numericValue: bigint,
  extraData: string
] & {
  topicId: bigint;
  timestamp: bigint;
  numericValue: bigint;
  extraData: string;
};

export type SignedNumericDataStruct = {
  signature: BytesLike;
  numericData: NumericDataStruct;
};

export type SignedNumericDataStructOutput = [
  signature: string,
  numericData: NumericDataStructOutput
] & { signature: string; numericData: NumericDataStructOutput };

export type UpshotAdapterNumericDataStruct = {
  signedNumericData: SignedNumericDataStruct[];
  extraData: BytesLike;
};

export type UpshotAdapterNumericDataStructOutput = [
  signedNumericData: SignedNumericDataStructOutput[],
  extraData: string
] & { signedNumericData: SignedNumericDataStructOutput[]; extraData: string };

export interface IUpshotAdapterInterface extends Interface {
  getFunction(nameOrSignature: "getTopic" | "verifyData"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTopic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyData",
    values: [UpshotAdapterNumericDataStruct]
  ): string;

  decodeFunctionResult(functionFragment: "getTopic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyData", data: BytesLike): Result;
}

export interface IUpshotAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): IUpshotAdapter;
  waitForDeployment(): Promise<this>;

  interface: IUpshotAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTopic: TypedContractMethod<
    [topicId: BigNumberish],
    [TopicViewStructOutput],
    "view"
  >;

  verifyData: TypedContractMethod<
    [pd: UpshotAdapterNumericDataStruct],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTopic"
  ): TypedContractMethod<
    [topicId: BigNumberish],
    [TopicViewStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "verifyData"
  ): TypedContractMethod<
    [pd: UpshotAdapterNumericDataStruct],
    [bigint],
    "payable"
  >;

  filters: {};
}
